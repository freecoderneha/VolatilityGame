package hello.abc.neha.volatilitygame;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import org.w3c.dom.Text;

import java.util.Date;
import java.util.Random;

public class PlayGame extends AppCompatActivity {
    Button peb,pbb,niftyb,mgb,invest,returnb,periodb,debtb,equityb,totalb,balanceb;
    ImageView go;
    EditText debt,equity;
    Double debt_user_entered_value,equity_user_entered_value;
    int clickcount=0;
    Double balance,totalSum;
    int[] mg = {0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            42,
            42,
            42,
            42,
            42,
            42,
            42,
            42,
            42,
            42,
            42,
            42,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            101,
            101,
            101,
            101,
            101,
            101,
            101,
            101,
            101,
            101,
            101,
            101,
            54,
            54,
            54,
            54,
            54,
            54,
            54,
            54,
            54,
            54,
            54,
            54,
            95,
            95,
            95,
            95,
            95,
            95,
            95,
            95,
            95,
            95,
            95,
            95,
            88,
            88,
            88,
            88,
            88,
            88,
            88,
            88,
            88,
            88,
            88,
            88,
            71,
            71,
            71,
            71,
            71,
            71,
            71,
            71,
            71,
            71,
            71,
            71,
            64,
            64,
            64,
            64,
            64,
            64,
            64,
            64,
            64,
            64,
            64,
            64,
            66,
            66,
            66,
            66,
            66,
            66,
            66,
            66,
            66,
            66,
            66,
            66,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            82,
            69,
            69,
            69,
            69,
            69,
            69,
            69,
            69,
            69,
            69,
            69,
            69,
            80

    };

    Double[] pe={11.62,
            12.48,
            13.5,
            16.31,
            14.95,
            18.25,
            17.84,
            19.63,
            21.38,
            21.81,
            19.78,
            21.69,
            25.91,
            25.13,
            27.35,
            24.7,
            Double.valueOf(20),
            22.46,
            23.31,
            20.58,
            21.69,
            19.48,
            18.16,
            19.34,
            19.06,
            22.02,
            20.34,
            17.05,
            13.1,
            15.44,
            15.29,
            17.42,
            18.96,
            18.25,
            18.08,
            16.39,
            15.9,
            14.24,
            15.08,
            14.21,
            14.47,
            14.48,
            14.92,
            14.31,
            14.36,
            13.44,
            10.86,
            11.59,
            12.32,
            12.95,
            15.16,
            15.66,
            17.65,
            18.27,
            21.09,
            19.55,
            21.57,
            21.27,
            16.62,
            12.14,
            12.9,
            13.69,
            13.67,
            14.84,
            15.03,
            16.42,
            15.57,
            14.34,
            14.88,
            14.84,
            13.32,
            13.93,
            14.26,
            14.36,
            14.92,
            16.33,
            14.32,
            16.23,
            17.16,
            17.73,
            18.56,
            20.68,
            20.46,
            16.78,
            18.57,
            17.67,
            19.68,
            20.82,
            20.16,
            21.41,
            21.48,
            19.95,
            18.33,
            17.49,
            19.76,
            20.41,
            20.62,
            19.65,
            20.25,
            22.79,
            25.65,
            25.66,
            27.64,
            22.68,
            21.12,
            20.66,
            22.42,
            20.17,
            16.66,
            18.56,
            18.38,
            16.98,
            13.33,
            11.76,
            13.3,
            13.12,
            12.7,
            14.49,
            17.37,
            20.62,
            20.2,
            21.09,
            20.78,
            22.89,
            19.81,
            22.77,
            23.31,
            21.07,
            21.33,
            22.52,
            22.06,
            20.81,
            21.99,
            22.91,
            23.02,
            25.54,
            25.12,
            23.78,
            24.57,
            20.7,
            21.14,
            22.11,
            21.19,
            20.65,
            20.75,
            19.81,
            18.19,
            17.51,
            19.04,
            17.87,
            16.79,
            18.66,
            18.92,
            18.79,
            17.99,
            16.36,
            17.51,
            17.13,
            17.63,
            19.22,
            18.46,
            18.56,
            18.82,
            18.42,
            17.74,
            17.51,
            18.05,
            17.81,
            17.96,
            17.03,
            Double.valueOf(16),
            16.95,
            18.2,
            18.51,
            18.69,
            17.34,
            17.52,
            18.91,
            18.72,
            20.27,
            20.71,
            20.05,
            20.99,
            20.77,
            21.58,
            21.85,
            21.16,
            22.51,
            23.95,
            22.95,
            22.47,
            23.25,
            23.43,
            23.54,
            21.57,
            22.21,
            21.98,
            21.51,
            21.53,
            20.22,
            19.53,
            21.19,
            21.25,
            22.65,
            22.86,
            23.61,
            24.06,
            23.8,
            23.31,
            21.53,
            22.08

    };

    Double[] pb={ 2.07,
            2.22,
            2.4,
            2.8,
            2.56,
            3.02,
            3.1,
            3.41,
            3.71,
            3.89,
            3.53,
            3.87,
            4.63,
            4.51,
            4.96,
            4.48,
            3.61,
            4.52,
            4.97,
            4.29,
            4.66,
            4.19,
            3.91,
            4.17,
            4.11,
            4.57,
            4.42,
            3.72,
            2.05,
            2.43,
            2.39,
            2.79,
            3.04,
            2.93,
            2.93,
            3.11,
            2.67,
            2.39,
            3.07,
            2.38,
            2.43,
            2.34,
            2.41,
            2.31,
            2.32,
            2.16,
            2.02,
            2.19,
            2.44,
            2.58,
            2.96,
            3.06,
            3.45,
            3.57,
            4.12,
            3.81,
            4.26,
            3.59,
            3.48,
            2.89,
            2.89,
            2.96,
            2.96,
            3.21,
            3.1,
            3.39,
            3.67,
            3.58,
            3.89,
            3.88,
            3.59,
            3.91,
            3.96,
            3.87,
            3.92,
            4.06,
            3.65,
            4.13,
            4.37,
            4.49,
            4.72,
            5.26,
            5.46,
            4.41,
            4.69,
            4.29,
            4.5,
            4.73,
            4.87,
            5.14,
            5.12,
            5.27,
            4.86,
            4.63,
            5.41,
            5.59,
            5.39,
            5.1,
            5.1,
            5.41,
            6.15,
            6.15,
            6.4,
            5.57,
            5.19,
            5.09,
            5.62,
            4.87,
            3.86,
            4.06,
            3.82,
            3.29,
            2.56,
            2.25,
            2.5,
            2.3,
            2.22,
            2.53,
            3.02,
            3.69,
            3.6,
            3.79,
            3.63,
            3.76,
            3.42,
            3.62,
            3.67,
            3.45,
            3.53,
            3.73,
            3.71,
            3.53,
            3.74,
            3.83,
            3.58,
            3.93,
            3.85,
            3.76,
            3.88,
            3.42,
            3.5,
            3.7,
            3.62,
            3.47,
            3.49,
            3.42,
            2.98,
            2.86,
            3.15,
            2.95,
            2.77,
            3.04,
            3.01,
            3.02,
            3.07,
            2.84,
            3.02,
            2.97,
            2.86,
            3.19,
            3.05,
            3.11,
            3.16,
            3.18,
            3.04,
            3.01,
            3.16,
            3.13,
            3.07,
            2.84,
            2.75,
            2.78,
            Double.valueOf(3),
            2.95,
            2.99,
            2.84,
            2.94,
            3.24,
            3.2,
            3.5,
            3.49,
            3.42,
            3.49,
            3.4,
            3.51,
            3.61,
            3.49,
            3.71,
            3.8,
            3.69,
            3.59,
            3.65,
            3.52,
            3.5,
            3.13,
            3.2,
            3.22,
            3.19,
            3.19,
            3.03,
            2.9,
            3.26,
            3.25,
            3.41,
            3.38,
            3.38,
            3.35,
            3.11,
            3.27,
            3.11,
            3.1

    };


    Double[] nifty= new Double[]{890.8,
            940.15,
            1015.8,
            1063.45,
            970.75,
            1123.8,
            1183.2,
            1289.6,
            1410.7,
            1403.2,
            Double.valueOf(1270),
            1388.75,
            1592.2,
            1549.5,
            1712.7,
            1534.75,
            1333.45,
            Double.valueOf(1349),
            1495.25,
            1326.85,
            1427.75,
            Double.valueOf(1282),
            1200.8,
            1276.2,
            1254.3,
            1359.15,
            1358.05,
            1138.1,
            910.1,
            1065.4,
            1055.3,
            1081.65,
            Double.valueOf(1178),
            1138.95,
            1093.3,
            1039.75,
            1068.95,
            957.7,
            1013.5,
            955.2,
            951.45,
            1067.9,
            1100.15,
            1055.3,
            1058.85,
            984.3,
            938.3,
            1015.15,
            1130.7,
            1195.75,
            1375.95,
            1420.85,
            1601.65,
            1657.65,
            1912.25,
            Double.valueOf(1769),
            1852.7,
            1819.65,
            1766.7,
            1507.9,
            1537.2,
            1639.05,
            1635.45,
            1775.15,
            1797.75,
            1962.05,
            Double.valueOf(2115),
            2059.85,
            2084.4,
            2067.65,
            1916.75,
            2087.55,
            2211.9,
            2318.05,
            2405.75,
            2630.05,
            2386.75,
            2698.95,
            2835.95,
            2971.55,
            3123.1,
            3473.3,
            3605.45,
            2962.25,
            3150.95,
            3147.8,
            3435.45,
            3569.6,
            3767.05,
            3997.6,
            4007.4,
            4137.2,
            3811.2,
            3633.6,
            4150.85,
            4297.05,
            4313.75,
            4345.85,
            4474.75,
            5068.95,
            5866.45,
            Double.valueOf(5865),
            6144.35,
            5317.25,
            Double.valueOf(4953),
            4739.55,
            5228.2,
            4739.6,
            3896.75,
            4413.55,
            4348.65,
            3950.75,
            3043.85,
            2682.9,
            3033.45,
            2766.65,
            2674.6,
            3060.35,
            Double.valueOf(3654),
            4529.9,
            4340.9,
            4711.4,
            4625.35,
            5083.4,
            4563.9,
            Double.valueOf(5122),
            5232.2,
            4899.7,
            Double.valueOf(5017),
            5290.5,
            5222.75,
            4970.2,
            5251.4,
            5431.65,
            5471.85,
            6143.4,
            6117.55,
            5960.9,
            6157.6,
            5417.2,
            5522.3,
            5826.05,
            5701.3,
            Double.valueOf(5592),
            5627.2,
            5516.8,
            Double.valueOf(5040),
            4849.5,
            5257.95,
            4936.85,
            4636.75,
            5235.7,
            5339.75,
            5317.9,
            5239.15,
            4841.6,
            5278.6,
            5240.5,
            5253.75,
            5718.8,
            5645.05,
            5870.95,
            5950.85,
            5998.9,
            5719.7,
            5704.4,
            5999.35,
            5939.3,
            5898.85,
            5727.85,
            5550.75,
            5780.05,
            6307.2,
            6217.85,
            6301.65,
            6001.8,
            6297.95,
            6752.55,
            6715.3,
            7474.1,
            7751.6,
            7649.25,
            8086.85,
            7859.95,
            8362.65,
            8538.3,
            Double.valueOf(8284),
            8797.4,
            8956.75,
            8659.9,
            8324.8,
            8236.45,
            8444.9,
            8516.9,
            7785.85,
            7950.9,
            8050.8,
            7954.9,
            7963.2,
            7555.95,
            7222.3,
            7713.05,
            7805.9,
            8179.95,
            8328.35,
            8636.55,
            8774.65,
            8738.1,
            8626.25,
            8192.9,
            8179.5

    };

    Double[] ret={78.74,
            64.81,
            68.61,
            44.32,
            37.36,
            20.04,
            26.37,
            2.89,
            1.21,
            -8.64,
            -5.45,
            -8.10,
            -21.22,
            -12.28,
            -20.71,
            -25.84,
            -14.72,
            -14.90,
            -26.38,
            -19.87,
            -26.59,
            -29.01,
            -17.22,
            -16.52,
            -15.87,
            -20.42,
            -13.26,
            0.07,
            4.96,
            0.23,
            4.25,
            -2.44,
            -10.11,
            -13.58,
            -14.18,
            -2.37,
            5.78,
            24.86,
            35.76,
            48.75,
            68.34,
            55.23,
            73.82,
            67.63,
            74.97,
            84.87,
            88.29,
            48.54,
            35.95,
            37.07,
            18.86,
            24.94,
            12.24,
            18.36,
            10.60,
            16.44,
            12.51,
            13.63,
            8.49,
            38.44,
            43.89,
            41.43,
            47.10,
            48.16,
            32.76,
            37.56,
            34.09,
            44.26,
            49.83,
            67.98,
            88.10,
            41.90,
            42.45,
            35.80,
            42.80,
            35.72,
            57.83,
            48.12,
            41.31,
            39.23,
            22.03,
            4.62,
            15.13,
            45.06,
            36.90,
            38.06,
            30.25,
            42.00,
            55.73,
            46.71,
            53.33,
            28.52,
            29.96,
            30.44,
            25.95,
            10.30,
            -9.67,
            1.56,
            -2.82,
            -22.06,
            -48.11,
            -54.26,
            -50.63,
            -47.97,
            -46.00,
            -35.43,
            -30.11,
            -4.42,
            11.40,
            6.75,
            6.36,
            28.67,
            49.94,
            90.91,
            72.48,
            77.10,
            87.58,
            72.87,
            42.93,
            9.72,
            20.97,
            15.29,
            18.30,
            20.85,
            34.04,
            16.38,
            17.69,
            10.56,
            10.07,
            10.12,
            9.16,
            12.51,
            7.16,
            1.57,
            -7.89,
            -21.06,
            -14.05,
            -17.18,
            -24.70,
            -3.35,
            -3.31,
            -8.72,
            -8.11,
            -13.42,
            -6.19,
            -5.01,
            4.24,
            17.93,
            7.36,
            18.92,
            28.34,
            14.58,
            7.12,
            7.27,
            14.51,
            22.67,
            11.75,
            9.30,
            5.65,
            1.07,
            11.73,
            5.91,
            5.89,
            0.05,
            10.11,
            18.37,
            11.93,
            25.84,
            31.41,
            33.54,
            45.69,
            35.98,
            32.59,
            37.32,
            31.46,
            46.58,
            42.22,
            28.25,
            23.97,
            10.20,
            8.94,
            11.34,
            -3.72,
            1.16,
            -3.73,
            -6.83,
            -3.87,
            -14.11,
            -19.36,
            -10.93,
            -6.23,
            -0.69,
            -1.38,
            1.40,
            12.70,
            9.90,
            7.15,
            2.99,
            2.72,
            15.36,
            23.86,
            19.77,
            19.32,
            17.56,
            15.45,
            17.11,
            13.67,
            12.83,
            21.03,
            23.54,
            27.58

    };

    String[] period={"1-Jan-99",
            "1-Feb-99",
            "1-Mar-99",
            "1-Apr-99",
            "3-May-99",
            "1-Jun-99",
            "1-Jul-99",
            "2-Aug-99",
            "1-Sep-99",
            "1-Oct-99",
            "1-Nov-99",
            "1-Dec-99",
            "3-Jan-00",
            "1-Feb-00",
            "1-Mar-00",
            "3-Apr-00",
            "2-May-00",
            "1-Jun-00",
            "3-Jul-00",
            "1-Aug-00",
            "4-Sep-00",
            "3-Oct-00",
            "1-Nov-00",
            "1-Dec-00",
            "1-Jan-01",
            "1-Feb-01",
            "1-Mar-01",
            "2-Apr-01",
            "1-Oct-01",
            "3-Dec-01",
            "1-Jan-02",
            "1-Feb-02",
            "1-Mar-02",
            "1-Apr-02",
            "2-May-02",
            "3-Jun-02",
            "1-Jul-02",
            "1-Aug-02",
            "2-Sep-02",
            "1-Oct-02",
            "1-Nov-02",
            "2-Dec-02",
            "1-Jan-03",
            "3-Feb-03",
            "3-Mar-03",
            "1-Apr-03",
            "2-May-03",
            "2-Jun-03",
            "1-Jul-03",
            "1-Aug-03",
            "1-Sep-03",
            "1-Oct-03",
            "3-Nov-03",
            "1-Dec-03",
            "1-Jan-04",
            "3-Feb-04",
            "1-Mar-04",
            "1-Apr-04",
            "3-May-04",
            "1-Jun-04",
            "1-Jul-04",
            "2-Aug-04",
            "1-Sep-04",
            "1-Oct-04",
            "1-Nov-04",
            "1-Dec-04",
            "3-Jan-05",
            "1-Feb-05",
            "1-Mar-05",
            "1-Apr-05",
            "2-May-05",
            "1-Jun-05",
            "1-Jul-05",
            "1-Aug-05",
            "1-Sep-05",
            "3-Oct-05",
            "1-Nov-05",
            "1-Dec-05",
            "2-Jan-06",
            "1-Feb-06",
            "1-Mar-06",
            "3-Apr-06",
            "2-May-06",
            "1-Jun-06",
            "3-Jul-06",
            "1-Aug-06",
            "1-Sep-06",
            "3-Oct-06",
            "1-Nov-06",
            "1-Dec-06",
            "2-Jan-07",
            "1-Feb-07",
            "1-Mar-07",
            "2-Apr-07",
            "3-May-07",
            "1-Jun-07",
            "2-Jul-07",
            "1-Aug-07",
            "3-Sep-07",
            "1-Oct-07",
            "1-Nov-07",
            "3-Dec-07",
            "1-Jan-08",
            "1-Feb-08",
            "3-Mar-08",
            "1-Apr-08",
            "2-May-08",
            "2-Jun-08",
            "1-Jul-08",
            "1-Aug-08",
            "1-Sep-08",
            "1-Oct-08",
            "3-Nov-08",
            "1-Dec-08",
            "1-Jan-09",
            "2-Feb-09",
            "2-Mar-09",
            "1-Apr-09",
            "4-May-09",
            "1-Jun-09",
            "1-Jul-09",
            "3-Aug-09",
            "1-Sep-09",
            "1-Oct-09",
            "3-Nov-09",
            "1-Dec-09",
            "4-Jan-10",
            "1-Feb-10",
            "2-Mar-10",
            "1-Apr-10",
            "3-May-10",
            "1-Jun-10",
            "1-Jul-10",
            "2-Aug-10",
            "1-Sep-10",
            "1-Oct-10",
            "1-Nov-10",
            "1-Dec-10",
            "3-Jan-11",
            "1-Feb-11",
            "1-Mar-11",
            "1-Apr-11",
            "2-May-11",
            "1-Jun-11",
            "1-Jul-11",
            "1-Aug-11",
            "2-Sep-11",
            "3-Oct-11",
            "1-Nov-11",
            "1-Dec-11",
            "2-Jan-12",
            "1-Feb-12",
            "1-Mar-12",
            "2-Apr-12",
            "2-May-12",
            "1-Jun-12",
            "2-Jul-12",
            "1-Aug-12",
            "3-Sep-12",
            "1-Oct-12",
            "1-Nov-12",
            "3-Dec-12",
            "1-Jan-13",
            "1-Feb-13",
            "1-Mar-13",
            "1-Apr-13",
            "2-May-13",
            "3-Jun-13",
            "1-Jul-13",
            "1-Aug-13",
            "2-Sep-13",
            "1-Oct-13",
            "1-Nov-13",
            "2-Dec-13",
            "1-Jan-14",
            "3-Feb-14",
            "3-Mar-14",
            "1-Apr-14",
            "2-May-14",
            "2-Jun-14",
            "1-Jul-14",
            "1-Aug-14",
            "1-Sep-14",
            "1-Oct-14",
            "3-Nov-14",
            "1-Dec-14",
            "1-Jan-15",
            "2-Feb-15",
            "2-Mar-15",
            "1-Apr-15",
            "4-May-15",
            "1-Jun-15",
            "1-Jul-15",
            "3-Aug-15",
            "1-Sep-15",
            "1-Oct-15",
            "2-Nov-15",
            "1-Dec-15",
            "1-Jan-16",
            "1-Feb-16",
            "1-Mar-16",
            "1-Apr-16",
            "2-May-16",
            "1-Jun-16",
            "1-Jul-16",
            "1-Aug-16",
            "1-Sep-16",
            "3-Oct-16",
            "1-Nov-16",
            "1-Dec-16",
            "2-Jan-17"

    };
    int index;

    MediaPlayer mp1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.play_game);
        mp1 = MediaPlayer.create(this, R.raw.coins);


        go=(ImageView) findViewById(R.id.go);
        go.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                stopMusic();
                mp1 = MediaPlayer.create(getApplicationContext(), R.raw.coins);
                mp1.start();


                index = new Random().nextInt(pe.length);
                peb= (Button) findViewById(R.id.pe);
                peb.setText(String.valueOf(pe[index]));
                pbb = (Button) findViewById(R.id.pb);
                pbb.setText(String.valueOf(pb[index]));
                niftyb = (Button) findViewById(R.id.nifty);
                niftyb.setText(String.valueOf(nifty[index]));
                mgb = (Button) findViewById(R.id.mg);
                mgb.setText(String.valueOf(mg[index]));       }

        });

        invest=(Button) findViewById(R.id.invest);
invest.setEnabled(false);
        debt=(EditText) findViewById(R.id.debtage);
        equity=(EditText) findViewById(R.id.equityage);
        debt.addTextChangedListener(watch);


        invest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v){

                stopMusic();
                mp1 = MediaPlayer.create(getApplicationContext(), R.raw.invest);
                mp1.start();


                    clickcount = clickcount + 1;
                    if (clickcount == 1) {
                        balance = Double.valueOf(1000000);
                        invest(index, balance);
                    } else {
                        balance = totalSum;
                        invest(index, balance);
                    }
                }

        });

    }
    private void stopMusic(){
        if (mp1 != null) {
            mp1.stop();
            mp1.release();
            mp1= null;
        }
    }


    private Double invest(int index, Double balance) {

        debt_user_entered_value = Double.parseDouble(debt.getText().toString());
        equity_user_entered_value=Double.parseDouble(equity.getText().toString());


            returnb = (Button) findViewById(R.id.return1);
            returnb.setText(String.valueOf(String.format("%.0f", ret[index])));

            Double x = ret[index];
            periodb = (Button) findViewById(R.id.period);
            periodb.setText(String.valueOf(period[index]));

            Double pre_debt = (debt_user_entered_value * balance) / 100;
            Double final_debt = pre_debt + ((pre_debt * 10) / 100);

            debtb = (Button) findViewById(R.id.debt);
            debtb.setText(String.valueOf(String.format("%.0f", final_debt)));


            Double pre_equity = (equity_user_entered_value * balance) / 100;
            Double final_equity = pre_equity + ((x * pre_equity) / 100);

            equityb = (Button) findViewById(R.id.equity);
            equityb.setText(String.valueOf(String.format("%.0f", final_equity)));

            totalSum = final_debt + final_equity;

            totalb = (Button) findViewById(R.id.total);
            totalb.setText(String.valueOf(String.format("%.0f", totalSum)));
            balanceb = (Button) findViewById(R.id.balance);
            balanceb.setText(String.valueOf(String.format("%.0f", totalSum)));
            return totalSum;
        }


    TextWatcher watch = new TextWatcher(){

        @Override
        public void afterTextChanged(Editable s) {
            if(s.toString().trim().length()==0){
                equity.setText("");
                return;
            }
            if(Double.parseDouble(s.toString())>100 ){
                equity.setText("");
                Toast.makeText(getApplicationContext(), "Debt percentage cannot be greater than 100", Toast.LENGTH_SHORT).show();
                return;
            }
            else if(Double.parseDouble(s.toString())<0){
                equity.setText("");
                Toast.makeText(getApplicationContext(), "Debt percentage cannot be less than 0", Toast.LENGTH_SHORT).show();
                return ;
            }


        }

        @Override
        public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
                                      int arg3) {

        }

        @Override
        public void onTextChanged(CharSequence s, int a, int b, int c) {

                if(s.toString().trim().length()==0) {
                    invest.setEnabled(false);
                    equity.setText("");
                    }else {
                    invest.setEnabled(true);


                    Double p = Double.parseDouble(s.toString());
                    equity.setText(String.valueOf(100 - p));
                }
        }};

    @Override
    public void onBackPressed() {
        DialogInterface.OnClickListener discardButtonClickListener =
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        finish();
                    }
                };
        showUnsavedChangesDialog(discardButtonClickListener);
    }


    private void showUnsavedChangesDialog(DialogInterface.OnClickListener discardButtonClickListener) {

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setMessage("Do you want to exit the game?");
        builder.setPositiveButton("Exit", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                Intent intent = new Intent(PlayGame.this,AdvisorIndian.class);
                startActivity(intent);
            }
        });
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                if (dialog != null) {
                    dialog.dismiss();
                }
            }
        });
        AlertDialog alertDialog = builder.create();
        alertDialog.show();
    }
}